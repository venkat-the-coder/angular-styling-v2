1. Angular Component structure

-- basic component structure with its decorator


view encapsulation modes
1. none
2. emulated
3. shadow dom

Angular will add some unique identifier tag to each node of template to distinguish the
styles

view encapsulation : emulated  --> will be work on this approach ( this is default)
encapsulation:ViewEncapsulation.emulated

view encapsulation : None --> will apply to all nodes
encapsulation:ViewEncapsulation.None

view encapsulation : None --> will apply to all nodes within the created shadowDom
but incompitable with lot of browsers
encapsulation:ViewEncapsulation.shadowDom


========================================================================
Several ways of adding styles to Angular
1. embedded styles
2. component level styles inline 
3. seperate file and refer it in component style urls
4. global level style sheet
5. adding ref of stylesheet ( minified version) in angular.json
6. using css @imports



when using external style sheets and refer it to component
-- angular still adds the unique identifier to nodes 
-- it adds all those styles in a style tag and set it on the header while redering 


similarly we can add html file and refere it into templateUrls
-- only single template file can be refered to templateUrls


========================================================================
Emulated Css selectors
:host --> root level class selector nothing but a actual component
:host-context --> also looks the presnese of particular class in childrens and parent or host element inside the component

:host(.example)
{
    will be applied if the host element contains the example class
    <app-nav class='example'></app-nav>
}


use host:context puposefully


we use deep combinators to apply th style to depth elements of parent or like projected content
it will go through the boundries of shadowdom and apply styles
the below will apply style to the elements inside the <ng-content></ng-content>

 ::ng-deep a {
    color: #fff;
    padding: 0 1em;
    text-decoration: none;
  }

  ::ng-deep a:hover {
    text-decoration: underline;
  }


  we can add host to get to more precise styling
   :host ul ::ng-deep a:hover {
    text-decoration: underline;
  }

  ==============================================================
  Global styles --> traditional approach

  we can create a seperate styling sheets inside styles folder wich can be sass
  and can be imported into the global style.scs file 
  or we can add as styleurls of app component and set encapsulation as none 


 Global styles --> modular approach


class based system:

1. we can create many partia global styles which is organized in to unique folders that can be imported in global style sheet and used
2. we can also break down them into the component specific styles.
3. always need to have better naming standard when comes to selector to avoide conflicts

Mixins an variables Only:
1. sometimes components elements becomes messy adding thier own classes ,global classes and other 3rd party classes
2. to over come we use mixins and variables

-- load the styles set path of those styles i angular.json

angular.json --> project --> build --> after assets
"stylePreprocessorOptions":{
  "includePaths":[
    "path1"
    "path2"
  ]
}

=======================================================================
==> Naming convention on component specific styles 

1. usually naming the styling using its selector should follow some approach
where we can actually use BEM  block element modifier

ex:
<ul class="app-navbar-header"></ul>
app--> block
navbar --> element
header --> modifier 

the above can also be done like below which is not a good practice

<ul class="items"></ul>


example:
<ul class="app-navbar-header">
  <li class="app-navbar-header--item>
    <a class="app-navabr-header--item--link"></a>
  </li>
</ul>




